// Generated by ts-to-zod
import { z } from "../../deps/zod.ts";
import { type Block } from "./../../src/type/Script.ts";

export const blockSchema: z.ZodSchema<Block> = z.lazy(() =>
  z.object({
    id: z.string(),
    x: z.number(),
    y: z.number(),
    type: z.string(),
    params: z.array(z.union([blockSchema, z.number(), z.string()]).nullable()),
    statements: z
      .array(z.union([z.array(blockSchema), z.undefined()]))
      .optional(),
    movable: z.null(),
    deletable: z.union([z.literal(1), z.literal(false)]),
    emphasized: z.boolean(),
    readOnly: z.null(),
    copyable: z.boolean(),
    assemble: z.boolean(),
    extensions: z.tuple([]),
  }),
);

const commentSchema = z.object({
  id: z.string(),
  x: z.number(),
  y: z.number(),
  width: z.number(),
  height: z.number(),
  value: z.string(),
  readOnly: z.null(),
  visible: z.boolean(),
  display: z.boolean(),
  movable: z.boolean(),
  isOpened: z.boolean(),
  deletable: z.literal(1),
  type: z.literal("comment"),
});

const scriptSchema_ = z.array(
  z.array(z.union([blockSchema, commentSchema])),
);

export const scriptSchema = z.string().pipe(
  z.preprocess((input, ctx) => {
    try {
      return JSON.parse(input)
    } catch {
      ctx.issues.push({
        code: "custom",
        message: "Invalid JSON",
        input,
      })
    }
  }, scriptSchema_)
);
